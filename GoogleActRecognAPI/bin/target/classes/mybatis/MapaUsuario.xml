<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.acerodocs.api.db.dao.PostgreSQLService">

	<!-- ************** CREATE ************** -->
	<insert id="newToken" parameterType="com.acerodocs.api.db.entities.Token">
		INSERT INTO
		"Token"(id_token, mail, client, token, timestamp_)
		VALUES (DEFAULT,
		#{mail}, #{client},
		#{token}, now());
	</insert>

	<insert id="nuevoEventoCliente" parameterType="com.acerodocs.api.db.entities.EventoCliente">
		INSERT INTO
		evento_cliente (id_evento_cliente, version, mail, cuerpo, tipo, time)
		VALUES
		(DEFAULT,#{version}, #{mail}, #{body}, #{tipo}, #{time})
	</insert>
	<insert id="newUser" parameterType="com.acerodocs.api.db.entities.Usuario">
		INSERT INTO user_ (mail,
		username, password, name, last_name, enabled) VALUES
		(#{mail},
		#{username}, #{password}, #{name}, #{last_name}, false)
	</insert>
	<insert id="newRole" parameterType="com.acerodocs.api.db.entities.Rol">
		INSERT INTO role
		(id_user_role, mail, authority) VALUES
		(DEFAULT, #{mail}, #{authority})
	</insert>
	<insert id="newUserActivation" parameterType="com.acerodocs.api.db.entities.ActivacionUsuario">
		INSERT INTO
		recorded_user_activator
		(id_activator,mail,"timestamp",activator,token)
		VALUES
		(DEFAULT,
		#{mail}, now() ,false, #{token})
	</insert>
	<insert id="newUserKeys" parameterType="com.acerodocs.api.db.entities.AceroKeyPairDB">
		INSERT INTO user_keys
		(id_user_key,mail,"timestamp",public,private) VALUES
		(DEFAULT, #{mail},
		now(), #{publicKey}, #{privateKey})
	</insert>

	<!-- ************** READ ************** -->
	<select id="getUsers" resultType="com.acerodocs.api.db.entities.UserRole">
		select u.mail, username, name, last_name, authority from user_ as u inner join role as r on (u.mail = r.mail);
	</select>

	<select id="myFriends" parameterType="String" resultType="String">
		SELECT
		u.mail FROM "archivosDB" AS adb, filekey AS fk, user_ AS u
		WHERE
        adb."fileHashTC"=fk."fileHashTC"
        AND
        ((adb.mail=#{mail} AND fk.mail!=#{mail} AND u.mail=fk.mail) 
        OR
        (adb.mail!=#{mail} AND fk.mail=#{mail} AND u.mail=adb.mail))
		GROUP BY u.mail;
	</select>

	<select id="getUserByToken" parameterType="String" resultType="String">
		SELECT
		mail
		FROM
		recorded_user_activator
		WHERE
		token = #{value}
	</select>

	<select id="getAuthToken" parameterType="String"
		resultType="com.acerodocs.api.db.entities.Token">
		SELECT id_token, mail, token, timestamp_, client
		FROM "Token"
		WHERE
		token = #{token};
	</select>


	<select id="getFullDeletedUsers" resultType="String">
		SELECT mail
		FROM
		recorded_user_activator
		WHERE (
		(SELECT EXTRACT(EPOCH FROM (now() -
		"timestamp"))
		FROM recorded_user_activator)
		> 86400.0) AND (activator =
		FALSE);
	</select>

	<select id="getRolesByMail" parameterType="String"
		resultType="com.acerodocs.api.db.entities.Rol">
		SELECT
		id_user_role, mail, authority
		FROM
		role
		WHERE
		mail=#{value}
	</select>

	<select id="getUserByMail" parameterType="String"
		resultType="com.acerodocs.api.db.entities.Usuario">
		SELECT
		*
		FROM
		user_
		WHERE
		mail =
		#{value}
	</select>

	<select id="getUserByName" parameterType="String"
		resultType="com.acerodocs.api.db.entities.Usuario">
		SELECT
		mail, password, name, last_name
		FROM
		user_
		WHERE
		username =
		#{value}
	</select>

	<select id="getUserActivation" parameterType="Integer"
		resultType="String">
		SELECT
		mail
		FROM
		recorded_user_activator
		WHERE
		id_activator =
		#{id_activator}
	</select>
	<select id="getActivationToken" parameterType="String"
		resultType="String">
		SELECT
		token
		FROM
		recorded_user_activator
		WHERE
		mail =
		#{mail}
	</select>

	<select id="getKeysByMail" parameterType="String"
		resultType="com.acerodocs.api.db.entities.AceroKeyPairDB">
		SELECT
		public as public_, private as private_, mail
		FROM
		user_keys
		WHERE
		mail = #{value}
	</select>
	<!-- ************** UPDATE ************** -->
	<update id="updateUser" parameterType="com.acerodocs.api.db.entities.Usuario">
		UPDATE
		user_
		SET
		mail = #{mail}
		<if test="username != null">
			,username = #{username}
		</if>
		<if test="password != null">
			,password = #{password}
		</if>
		<if test="name != null">
			,name = #{name}
		</if>
		<if test="last_name != null">
			,last_name = #{last_name}
		</if>
		<if test="enabled != null">
			,enabled = #{enabled}
		</if>
		WHERE
		mail = #{mail}
	</update>

	<update id="activateUserTableUser_" parameterType="String">
		UPDATE
		user_
		SET
		enabled =
		true
		WHERE
		mail = (SELECT mail FROM recorded_user_activator
		WHERE token
		= #{value})
	</update>

	<update id="activateUserTableActivations" parameterType="String">
		UPDATE
		recorded_user_activator
		SET
		activator =
		true
		WHERE
		token = #{value}
	</update>
	<!-- ************** DELETE ************** -->
	<delete id="deleteUserByMail" parameterType="String">
		DELETE FROM user_
		WHERE mail = #{value}
	</delete>

	<delete id="deleteUserAuthWebTokens" parameterType="String">
		DELETE FROM
		"Token"
		WHERE mail = #{mail} and client='WEB'
	</delete>
	<delete id="deleteUserAuthDesktopTokens" parameterType="String">
		DELETE FROM
		"Token"
		WHERE mail = #{mail} and client='DESKTOP' 
	</delete>
	<delete id="deleteUserAuthGDTokens" parameterType="String">
		DELETE FROM
		"Token"
		WHERE mail = #{mail} and client='GD'
	</delete>
	
	<delete id="deleteUsersActivations" parameterType="Integer">
		DELETE FROM user_ 
		WHERE 
		mail IN (select mail from recorded_user_activator where "timestamp" <![CDATA[<]]>
		NOW() - INTERVAL '${value} milliseconds') 
		AND NOT user_.enabled;
	</delete>

	<delete id="deleteOldDesktopAuthTokens" parameterType="Integer">
		DELETE FROM "Token" WHERE client='DESKTOP' AND timestamp_ <![CDATA[<]]>
		NOW() - INTERVAL '${value} milliseconds';
	</delete>

	<delete id="deleteOldWebAuthTokens" parameterType="Integer">
		DELETE FROM "Token" WHERE client='WEB' AND timestamp_ <![CDATA[<]]>
		NOW() - INTERVAL '${value} milliseconds';
	</delete>

	<delete id="deleteOldGDAuthTokens" parameterType="Integer">
		DELETE FROM "Token" WHERE client='GD' AND timestamp_ <![CDATA[<]]>
		NOW() - INTERVAL '${value} milliseconds';
	</delete>

</mapper>